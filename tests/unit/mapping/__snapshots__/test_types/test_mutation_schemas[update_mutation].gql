# serializer version: 1
# name: test_mutation_schemas[update_mutation]
  '''
  """Date (isoformat)"""
  scalar Date
  
  """Date with time (isoformat)"""
  scalar DateTime
  
  """Decimal (fixed-point)"""
  scalar Decimal
  
  """Aggregation fields"""
  type GroupAggregate {
    count: Int
    sum: GroupSumFields!
    min: GroupMinMaxFields!
    max: GroupMinMaxFields!
  }
  
  type GroupMinMaxFields {
    name: String
  }
  
  type GroupSumFields {
    name: String
  }
  
  """Identifier input"""
  input GroupTagIdFieldsInput {
    id: UUID!
  }
  
  input GroupTagIdFieldsInputGroupTagInputRequiredToOneInput {
    set: GroupTagIdFieldsInput
    create: GroupTagInput
  }
  
  input GroupTagIdFieldsInputGroupTagInputToOneInput {
    set: GroupTagIdFieldsInput
    create: GroupTagInput
  }
  
  input GroupTagIdFieldsInputTagUpdateToOneInput {
    set: GroupTagIdFieldsInput
    create: TagUpdate
  }
  
  """GraphQL update input type"""
  input GroupTagInput {
    id: UUID!
    name: String
  }
  
  """GraphQL type"""
  type GroupType {
    id: UUID!
    name: String!
    tagId: UUID!
    tag: TagType!
    usersAggregate: UserAggregate!
  
    """Fetch objects from the UserType collection"""
    users: [UserType!]!
  }
  
  """GraphQL update input type"""
  input GroupUpdate {
    id: UUID!
    name: String
    tag: GroupTagIdFieldsInputGroupTagInputRequiredToOneInput!
    users: GroupUsersIdFieldsInputGroupUserInputToManyUpdateInput
  }
  
  """GraphQL update input type"""
  input GroupUserInput {
    id: UUID!
    name: String
    tag: GroupTagIdFieldsInputGroupTagInputToOneInput
  }
  
  """Identifier input"""
  input GroupUsersIdFieldsInput {
    id: UUID!
  }
  
  input GroupUsersIdFieldsInputGroupUserInputToManyUpdateInput {
    set: [GroupUsersIdFieldsInput!]
    add: [GroupUsersIdFieldsInput!]
    remove: [GroupUsersIdFieldsInput!]
    create: [GroupUserInput!]
  }
  
  input GroupUsersIdFieldsInputTagUserInputToManyUpdateInput {
    set: [GroupUsersIdFieldsInput!]
    add: [GroupUsersIdFieldsInput!]
    remove: [GroupUsersIdFieldsInput!]
    create: [TagUserInput!]
  }
  
  """
  The `Interval` scalar type represents a duration of time as specified by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations).
  """
  scalar Interval @specifiedBy(url: "https://en.wikipedia.org/wiki/ISO_8601#Durations")
  
  """
  The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
  """
  scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")
  
  type Mutation {
    """Fetch object from the SQLDataTypesType collection by id"""
    updateDataType(data: SQLDataTypesUpdate!): SQLDataTypesType!
  
    """Fetch objects from the SQLDataTypesType collection"""
    updateDataTypes(data: [SQLDataTypesUpdate!]!): [SQLDataTypesType!]!
  
    """Fetch object from the GroupType collection by id"""
    updateGroup(data: GroupUpdate!): GroupType!
  
    """Fetch objects from the GroupType collection"""
    updateGroups(data: [GroupUpdate!]!): [GroupType!]!
  
    """Fetch object from the TagType collection by id"""
    updateTag(data: TagUpdate!): TagType!
  }
  
  type Query {
    hello: String!
  }
  
  """GraphQL type"""
  type SQLDataTypesType {
    id: UUID!
    dateCol: Date!
    timeCol: Time!
    timeDeltaCol: Interval!
    datetimeCol: DateTime!
    strCol: String!
    intCol: Int!
    floatCol: Float!
    decimalCol: Decimal!
    boolCol: Boolean!
    uuidCol: UUID!
    dictCol: JSON!
    arrayStrCol: [String!]!
  }
  
  """GraphQL update input type"""
  input SQLDataTypesUpdate {
    id: UUID!
    dateCol: Date
    timeCol: Time
    timeDeltaCol: Interval
    datetimeCol: DateTime
    strCol: String
    intCol: Int
    floatCol: Float
    decimalCol: Decimal
    boolCol: Boolean
    uuidCol: UUID
    dictCol: JSON
    arrayStrCol: [String!]
  }
  
  """GraphQL update input type"""
  input TagGroupInput {
    id: UUID!
    name: String
    users: GroupUsersIdFieldsInputTagUserInputToManyUpdateInput
  }
  
  """Identifier input"""
  input TagGroupsIdFieldsInput {
    id: UUID!
  }
  
  input TagGroupsIdFieldsInputTagGroupInputRequiredToManyUpdateInput {
    set: [TagGroupsIdFieldsInput!]
    add: [TagGroupsIdFieldsInput!]
    create: [TagGroupInput!]
  }
  
  """GraphQL type"""
  type TagType {
    id: UUID!
    groupsAggregate: GroupAggregate!
  
    """Fetch objects from the GroupType collection"""
    groups: [GroupType!]!
    name: String!
  }
  
  """GraphQL update input type"""
  input TagUpdate {
    id: UUID!
    groups: TagGroupsIdFieldsInputTagGroupInputRequiredToManyUpdateInput
    name: String
  }
  
  """GraphQL update input type"""
  input TagUserInput {
    id: UUID!
    name: String
    tag: GroupTagIdFieldsInputTagUpdateToOneInput
  }
  
  """Time (isoformat)"""
  scalar Time
  
  scalar UUID
  
  """Aggregation fields"""
  type UserAggregate {
    count: Int
    sum: UserSumFields!
    min: UserMinMaxFields!
    max: UserMinMaxFields!
  }
  
  type UserMinMaxFields {
    name: String
  }
  
  type UserSumFields {
    name: String
  }
  
  """GraphQL type"""
  type UserType {
    id: UUID!
    name: String!
    groupId: UUID
    group: GroupType!
    tagId: UUID
    tag: TagType!
  }
  '''
# ---
