# serializer version: 1
# name: test_query_schemas[aggregation_filters]
  '''
  """
  Boolean expression to compare aggregated fields. All fields are combined with logical 'AND'.
  """
  input ColorAggregateBoolExp {
    count: ColorAggregateBoolExpCount = null
    maxString: ColorAggregateBoolExpMaxstring = null
    minString: ColorAggregateBoolExpMinstring = null
    sum: ColorAggregateBoolExpSum = null
  }
  
  """Boolean expression to compare count aggregation."""
  input ColorAggregateBoolExpCount {
    arguments: [ColorCountFields!]
    distinct: Boolean = false
    predicate: IntOrderComparison!
  }
  
  """Boolean expression to compare max aggregation."""
  input ColorAggregateBoolExpMaxstring {
    arguments: [ColorMinMaxStringFieldsEnum!]!
    distinct: Boolean = false
    predicate: TextComparison!
  }
  
  """Boolean expression to compare min aggregation."""
  input ColorAggregateBoolExpMinstring {
    arguments: [ColorMinMaxStringFieldsEnum!]!
    distinct: Boolean = false
    predicate: TextComparison!
  }
  
  """Boolean expression to compare sum aggregation."""
  input ColorAggregateBoolExpSum {
    arguments: [ColorSumFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input ColorBoolExp {
    _and: [ColorBoolExp!]! = []
    _or: [ColorBoolExp!]! = []
    _not: ColorBoolExp
    fruitsAggregate: FruitAggregateBoolExp = null
    fruits: FruitBoolExp = null
    name: TextComparison = null
    id: UUIDGenericComparison = null
  }
  
  enum ColorCountFields {
    name
    id
  }
  
  enum ColorMinMaxStringFieldsEnum {
    name
  }
  
  enum ColorSumFieldsEnum {
    name
  }
  
  """GraphQL type"""
  type ColorType {
    fruitsAggregate: FruitAggregate!
  
    """Fetch objects from the FruitType collection"""
    fruits: [FruitType!]!
    name: String!
    id: UUID!
  }
  
  """
  Boolean expression to compare fields supporting order comparisons. All fields are combined with logical 'AND'
  """
  input FloatOrderComparison {
    eq: Float
    neq: Float
    isNull: Boolean
    in: [Float!]
    nin: [Float!]
    gt: Float
    gte: Float
    lt: Float
    lte: Float
  }
  
  """Aggregation fields"""
  type FruitAggregate {
    avg: FruitNumericFields!
    count: Int
    max: FruitMinMaxFields!
    min: FruitMinMaxFields!
    stddevPop: FruitNumericFields!
    stddevSamp: FruitNumericFields!
    sum: FruitSumFields!
    varPop: FruitNumericFields!
    varSamp: FruitNumericFields!
  }
  
  """
  Boolean expression to compare aggregated fields. All fields are combined with logical 'AND'.
  """
  input FruitAggregateBoolExp {
    avg: FruitAggregateBoolExpAvg = null
    count: FruitAggregateBoolExpCount = null
    max: FruitAggregateBoolExpMax = null
    maxString: FruitAggregateBoolExpMaxstring = null
    min: FruitAggregateBoolExpMin = null
    minString: FruitAggregateBoolExpMinstring = null
    stddevPop: FruitAggregateBoolExpStddevpop = null
    stddevSamp: FruitAggregateBoolExpStddevsamp = null
    sum: FruitAggregateBoolExpSum = null
    varPop: FruitAggregateBoolExpVarpop = null
    varSamp: FruitAggregateBoolExpVarsamp = null
  }
  
  """Boolean expression to compare avg aggregation."""
  input FruitAggregateBoolExpAvg {
    arguments: [FruitNumericFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  """Boolean expression to compare count aggregation."""
  input FruitAggregateBoolExpCount {
    arguments: [FruitCountFields!]
    distinct: Boolean = false
    predicate: IntOrderComparison!
  }
  
  """Boolean expression to compare max aggregation."""
  input FruitAggregateBoolExpMax {
    arguments: [FruitMinMaxNumericFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  """Boolean expression to compare max aggregation."""
  input FruitAggregateBoolExpMaxstring {
    arguments: [FruitMinMaxStringFieldsEnum!]!
    distinct: Boolean = false
    predicate: TextComparison!
  }
  
  """Boolean expression to compare min aggregation."""
  input FruitAggregateBoolExpMin {
    arguments: [FruitMinMaxNumericFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  """Boolean expression to compare min aggregation."""
  input FruitAggregateBoolExpMinstring {
    arguments: [FruitMinMaxStringFieldsEnum!]!
    distinct: Boolean = false
    predicate: TextComparison!
  }
  
  """Boolean expression to compare stddev_pop aggregation."""
  input FruitAggregateBoolExpStddevpop {
    arguments: [FruitNumericFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  """Boolean expression to compare stddev_samp aggregation."""
  input FruitAggregateBoolExpStddevsamp {
    arguments: [FruitNumericFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  """Boolean expression to compare sum aggregation."""
  input FruitAggregateBoolExpSum {
    arguments: [FruitSumFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  """Boolean expression to compare var_pop aggregation."""
  input FruitAggregateBoolExpVarpop {
    arguments: [FruitNumericFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  """Boolean expression to compare var_samp aggregation."""
  input FruitAggregateBoolExpVarsamp {
    arguments: [FruitNumericFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input FruitBoolExp {
    _and: [FruitBoolExp!]! = []
    _or: [FruitBoolExp!]! = []
    _not: FruitBoolExp
    colorAggregate: ColorAggregateBoolExp = null
    color: ColorBoolExp = null
    name: TextComparison = null
    colorId: UUIDGenericComparison = null
    sweetness: IntOrderComparison = null
    id: UUIDGenericComparison = null
  }
  
  enum FruitCountFields {
    name
    colorId
    sweetness
    id
  }
  
  type FruitMinMaxFields {
    name: String
    sweetness: Int
  }
  
  enum FruitMinMaxNumericFieldsEnum {
    sweetness
  }
  
  enum FruitMinMaxStringFieldsEnum {
    name
  }
  
  type FruitNumericFields {
    sweetness: Float
  }
  
  enum FruitNumericFieldsEnum {
    sweetness
  }
  
  type FruitSumFields {
    name: String
    sweetness: Int
  }
  
  enum FruitSumFieldsEnum {
    name
    sweetness
  }
  
  """GraphQL type"""
  type FruitType {
    color: ColorType!
    name: String!
    colorId: UUID
    sweetness: Int!
    id: UUID!
  }
  
  """Aggregation fields"""
  type GroupAggregate {
    count: Int
    max: GroupMinMaxFields!
    min: GroupMinMaxFields!
    sum: GroupSumFields!
  }
  
  """
  Boolean expression to compare aggregated fields. All fields are combined with logical 'AND'.
  """
  input GroupAggregateBoolExp {
    count: GroupAggregateBoolExpCount = null
    maxString: GroupAggregateBoolExpMaxstring = null
    minString: GroupAggregateBoolExpMinstring = null
    sum: GroupAggregateBoolExpSum = null
  }
  
  """Boolean expression to compare count aggregation."""
  input GroupAggregateBoolExpCount {
    arguments: [GroupCountFields!]
    distinct: Boolean = false
    predicate: IntOrderComparison!
  }
  
  """Boolean expression to compare max aggregation."""
  input GroupAggregateBoolExpMaxstring {
    arguments: [GroupMinMaxStringFieldsEnum!]!
    distinct: Boolean = false
    predicate: TextComparison!
  }
  
  """Boolean expression to compare min aggregation."""
  input GroupAggregateBoolExpMinstring {
    arguments: [GroupMinMaxStringFieldsEnum!]!
    distinct: Boolean = false
    predicate: TextComparison!
  }
  
  """Boolean expression to compare sum aggregation."""
  input GroupAggregateBoolExpSum {
    arguments: [GroupSumFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  enum GroupCountFields {
    name
    tagId
    colorId
    id
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input GroupFilter {
    _and: [GroupFilter!]! = []
    _or: [GroupFilter!]! = []
    _not: GroupFilter
    tagAggregate: TagAggregateBoolExp = null
    tag: TagBoolExp = null
    usersAggregate: UserAggregateBoolExp = null
    users: UserBoolExp = null
    colorAggregate: ColorAggregateBoolExp = null
    color: ColorBoolExp = null
    name: TextComparison = null
    tagId: UUIDGenericComparison = null
    colorId: UUIDGenericComparison = null
    id: UUIDGenericComparison = null
  }
  
  type GroupMinMaxFields {
    name: String
  }
  
  enum GroupMinMaxStringFieldsEnum {
    name
  }
  
  type GroupSumFields {
    name: String
  }
  
  enum GroupSumFieldsEnum {
    name
  }
  
  """GraphQL type"""
  type GroupType {
    tag: TagType!
    usersAggregate: UserAggregate!
  
    """Fetch objects from the UserType collection"""
    users: [UserType!]!
    color: ColorType!
    name: String!
    tagId: UUID!
    colorId: UUID!
    id: UUID!
  }
  
  """
  Boolean expression to compare fields supporting order comparisons. All fields are combined with logical 'AND'
  """
  input IntOrderComparison {
    eq: Int
    neq: Int
    isNull: Boolean
    in: [Int!]
    nin: [Int!]
    gt: Int
    gte: Int
    lt: Int
    lte: Int
  }
  
  type Query {
    """Fetch objects from the GroupType collection"""
    groups(filter: GroupFilter = null): [GroupType!]!
  }
  
  """
  Boolean expression to compare aggregated fields. All fields are combined with logical 'AND'.
  """
  input TagAggregateBoolExp {
    count: TagAggregateBoolExpCount = null
    maxString: TagAggregateBoolExpMaxstring = null
    minString: TagAggregateBoolExpMinstring = null
    sum: TagAggregateBoolExpSum = null
  }
  
  """Boolean expression to compare count aggregation."""
  input TagAggregateBoolExpCount {
    arguments: [TagCountFields!]
    distinct: Boolean = false
    predicate: IntOrderComparison!
  }
  
  """Boolean expression to compare max aggregation."""
  input TagAggregateBoolExpMaxstring {
    arguments: [TagMinMaxStringFieldsEnum!]!
    distinct: Boolean = false
    predicate: TextComparison!
  }
  
  """Boolean expression to compare min aggregation."""
  input TagAggregateBoolExpMinstring {
    arguments: [TagMinMaxStringFieldsEnum!]!
    distinct: Boolean = false
    predicate: TextComparison!
  }
  
  """Boolean expression to compare sum aggregation."""
  input TagAggregateBoolExpSum {
    arguments: [TagSumFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input TagBoolExp {
    _and: [TagBoolExp!]! = []
    _or: [TagBoolExp!]! = []
    _not: TagBoolExp
    groupsAggregate: GroupAggregateBoolExp = null
    groups: GroupFilter = null
    name: TextComparison = null
    id: UUIDGenericComparison = null
  }
  
  enum TagCountFields {
    name
    id
  }
  
  enum TagMinMaxStringFieldsEnum {
    name
  }
  
  enum TagSumFieldsEnum {
    name
  }
  
  """GraphQL type"""
  type TagType {
    groupsAggregate: GroupAggregate!
  
    """Fetch objects from the GroupType collection"""
    groups: [GroupType!]!
    name: String!
    id: UUID!
  }
  
  """
  Boolean expression to compare String fields. All fields are combined with logical 'AND'
  """
  input TextComparison {
    eq: String
    neq: String
    isNull: Boolean
    in: [String!]
    nin: [String!]
    gt: String
    gte: String
    lt: String
    lte: String
    like: String
    nlike: String
    ilike: String
    nilike: String
    regexp: String
    iregexp: String
    nregexp: String
    inregexp: String
    startswith: String
    endswith: String
    contains: String
    istartswith: String
    iendswith: String
    icontains: String
  }
  
  scalar UUID
  
  """
  Boolean expression to compare fields supporting equality comparisons. All fields are combined with logical 'AND'
  """
  input UUIDGenericComparison {
    eq: UUID
    neq: UUID
    isNull: Boolean
    in: [UUID!]
    nin: [UUID!]
  }
  
  """Aggregation fields"""
  type UserAggregate {
    count: Int
    max: UserMinMaxFields!
    min: UserMinMaxFields!
    sum: UserSumFields!
  }
  
  """
  Boolean expression to compare aggregated fields. All fields are combined with logical 'AND'.
  """
  input UserAggregateBoolExp {
    count: UserAggregateBoolExpCount = null
    maxString: UserAggregateBoolExpMaxstring = null
    minString: UserAggregateBoolExpMinstring = null
    sum: UserAggregateBoolExpSum = null
  }
  
  """Boolean expression to compare count aggregation."""
  input UserAggregateBoolExpCount {
    arguments: [UserCountFields!]
    distinct: Boolean = false
    predicate: IntOrderComparison!
  }
  
  """Boolean expression to compare max aggregation."""
  input UserAggregateBoolExpMaxstring {
    arguments: [UserMinMaxStringFieldsEnum!]!
    distinct: Boolean = false
    predicate: TextComparison!
  }
  
  """Boolean expression to compare min aggregation."""
  input UserAggregateBoolExpMinstring {
    arguments: [UserMinMaxStringFieldsEnum!]!
    distinct: Boolean = false
    predicate: TextComparison!
  }
  
  """Boolean expression to compare sum aggregation."""
  input UserAggregateBoolExpSum {
    arguments: [UserSumFieldsEnum!]!
    distinct: Boolean = false
    predicate: FloatOrderComparison!
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input UserBoolExp {
    _and: [UserBoolExp!]! = []
    _or: [UserBoolExp!]! = []
    _not: UserBoolExp
    groupAggregate: GroupAggregateBoolExp = null
    group: GroupFilter = null
    tagAggregate: TagAggregateBoolExp = null
    tag: TagBoolExp = null
    name: TextComparison = null
    groupId: UUIDGenericComparison = null
    tagId: UUIDGenericComparison = null
    id: UUIDGenericComparison = null
  }
  
  enum UserCountFields {
    name
    groupId
    tagId
    id
  }
  
  type UserMinMaxFields {
    name: String
  }
  
  enum UserMinMaxStringFieldsEnum {
    name
  }
  
  type UserSumFields {
    name: String
  }
  
  enum UserSumFieldsEnum {
    name
  }
  
  """GraphQL type"""
  type UserType {
    group: GroupType!
    tag: TagType!
    name: String!
    groupId: UUID
    tagId: UUID
    id: UUID!
  }
  '''
# ---
